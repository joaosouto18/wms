<?php
namespace Wms\Domain\Entity\Deposito;

use Doctrine\ORM\EntityRepository,
    Wms\Domain\Entity\Deposito\AreaArmazenagem as AreaArmazenagemEntity;

/**
 * AreaArmazenagem
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AreaArmazenagemRepository extends EntityRepository
{

    public function save(AreaArmazenagemEntity $areaArmazenagemEntity, array $values)
    {
	extract($values['identificacao']);
	$em = $this->getEntityManager();
	$deposito = $em->getReference('wms:Deposito', $idDeposito);
	
	$areaArmazenagemEntity->setDeposito($deposito);
	$areaArmazenagemEntity->setDescricao($descricao);
	$em->persist($areaArmazenagemEntity);
    }

    public function remove($id)
    {
	$em = $this->getEntityManager();
	$proxy = $em->getReference('wms:Deposito\AreaArmazenagem', $id);
	
	$dql = $em->createQueryBuilder()
		->select('count(e) qtty')
		->from('wms:Deposito\Endereco', 'e')
		->where('e.idAreaArmazenagem = ?1')
		->setParameter(1, $id);
	$resultSet = $dql->getQuery()->execute();
	$countEndereco = (integer) $resultSet[0]['qtty'];

	if ($countEndereco > 0)
	    throw new \Exception("Não é possivel remover a Área de Armazenagem 
				    {$proxy->getDescricao()}, há {$countEndereco} 
				    endereço(s) vinculado(s).");
	// remove
	$em->remove($proxy);
    }
    
    /**
     * Returns all contexts stored as array (only id and nome)
     * @return array
     */
    public function getIdValue(array $criteria = null)
    {
	$areas = array();
	
	foreach ($this->findBy($criteria) as $area) {
	    $areas[$area->getId()] = $area->getDescricao();
	}
	
	return $areas;
    }
}