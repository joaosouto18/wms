<?php
namespace Wms\Domain\Entity\Sistema\Parametro;

use Doctrine\ORM\EntityRepository,
    Wms\Domain\Entity\Sistema\Parametro\Contexto as ContextoEntity;

/**
 * ContextoParametroRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContextoRepository extends EntityRepository
{

    /**
     * Save a new record to database from user data
     * @param ContextoParametro $contexto
     * @param array $values 
     */
    public function save(ContextoEntity $contexto, array $values)
    {
	$contexto->setDescricao($values['identificacao']['descricao']);
	$this->getEntityManager()->persist($contexto);
    }

    /**
     * Delete an record from database
     * @param int $id 
     */
    public function remove($id)
    {
	$em = $this->getEntityManager();
	$proxy = $em->getReference('wms:Sistema\Parametro\Contexto', $id);

	// check whether I have any user within the role
	$dql = $em->createQueryBuilder()
		->select('count(p) qtty')
		->from('wms:Sistema\Parametro', 'p')
		->where('p.idContexto = ?1')
		->setParameter(1, $id);
	$resultSet = $dql->getQuery()->execute();
	$count = (integer) $resultSet[0]['qtty'];

	// case perfilUsuario has any user 
	if ($count > 0)
	    throw new \Exception("Não é possivel remover o Contexto 
				    {$proxy->getDescricao()}, há {$count} 
				    parâtros vinculados a ele");
	// remove
	$em->remove($proxy);
    }

    /**
     * Returns all contexts stored as array (only id and nome)
     * @return array
     */
    public function getIdValue()
    {
	$contexts = array();

	foreach ($this->findAll() as $context)
	    $contexts[$context->getId()] = $context->getDescricao();

	return $contexts;
    }

}
