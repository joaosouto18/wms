CREATE OR REPLACE PROCEDURE PROC_GET_POS_ESTOQUE AS 
BEGIN

DELETE POSICAO_ESTOQUE_RESUMIDO WHERE TO_DATE(DTH_ESTOQUE,'DD/MM/YYYY') = TO_DATE(SYSDATE,'DD/MM/YYYY');

FOR i IN (
SELECT SYSDATE as DTH_ESTOQUE,
       NUM_RUA as NUM_RUA,
       SUM(POS_EXISTENTES) as QTD_EXISTENTES,
       SUM(POS_EXISTENTES) - SUM(CASE WHEN (POS_EXISTENTES - QTD_OCUPADOS) > POS_DISPONIVEIS THEN POS_DISPONIVEIS ELSE (POS_EXISTENTES - QTD_OCUPADOS) END) as QTD_OCUPADOS,
       SUM(CASE WHEN (POS_EXISTENTES - QTD_OCUPADOS) > POS_DISPONIVEIS THEN POS_DISPONIVEIS ELSE (POS_EXISTENTES - QTD_OCUPADOS) END) AS QTD_VAZIOS,
       ROUND((((SUM(POS_EXISTENTES) - SUM(CASE WHEN (POS_EXISTENTES - QTD_OCUPADOS) > POS_DISPONIVEIS THEN POS_DISPONIVEIS ELSE (POS_EXISTENTES - QTD_OCUPADOS) END)) / (SUM(POS_EXISTENTES))) * 100),2) as OCUPACAO
 FROM (SELECT DE.NUM_RUA,
              DE.NUM_PREDIO,
              DE.NUM_NIVEL,
              SUM(DE.QTD_ENDERECO) as POS_EXISTENTES,
              SUM(CASE WHEN DISP.QTD_DISPONIVEL > DE.QTD_ENDERECO THEN DE.QTD_ENDERECO ELSE DISP.QTD_DISPONIVEL END) AS POS_DISPONIVEIS,
              SUM(NVL(OCUP.QTD_OCUPADOS,0)) as QTD_OCUPADOS
        FROM (SELECT COUNT(DE.COD_DEPOSITO_ENDERECO) as QTD_ENDERECO,
                     DE.NUM_PREDIO, DE.NUM_NIVEL, DE.NUM_RUA, DE.COD_CARACTERISTICA_ENDERECO
                FROM DEPOSITO_ENDERECO DE
               WHERE DE.IND_ATIVO = 'S'
               GROUP BY DE.NUM_PREDIO, DE.NUM_NIVEL, DE.NUM_RUA, DE.COD_CARACTERISTICA_ENDERECO) DE
        LEFT JOIN (SELECT TRUNC((O.TAMANHO_LONGARINA - O.OCUPADO) /UN.LARGURA) as QTD_DISPONIVEL,
                          O.TAMANHO_LONGARINA - O.OCUPADO as LARGURA_DISPONIVEL,
                          O.NUM_PREDIO, O.NUM_NIVEL, O.NUM_RUA
                     FROM V_OCUPACAO_LONGARINA O,
                          (SELECT MIN(NUM_LARGURA_UNITIZADOR * 100) LARGURA FROM UNITIZADOR) UN) DISP
               ON DISP.NUM_PREDIO = DE.NUM_PREDIO
              AND DISP.NUM_NIVEL = DE.NUM_NIVEL
              AND DISP.NUM_RUA = DE.NUM_RUA
        LEFT JOIN (SELECT COUNT(DISTINCT (DE.COD_DEPOSITO_ENDERECO)) as QTD_OCUPADOS,
                          DE.NUM_RUA, DE.NUM_PREDIO, DE.NUM_NIVEL
                     FROM ESTOQUE E LEFT JOIN DEPOSITO_ENDERECO DE ON DE.COD_DEPOSITO_ENDERECO = E.COD_DEPOSITO_ENDERECO
                    GROUP BY DE.NUM_RUA, DE.NUM_PREDIO, DE.NUM_NIVEL) OCUP
               ON OCUP.NUM_PREDIO = DE.NUM_PREDIO
              AND OCUP.NUM_NIVEL = DE.NUM_NIVEL
              AND OCUP.NUM_RUA = DE.NUM_RUA
       WHERE 1 = 1
         AND DE.COD_CARACTERISTICA_ENDERECO NOT IN (37,39)
       GROUP BY DE.NUM_RUA, DE.NUM_PREDIO, DE.NUM_NIVEL
       ) OCUP
 GROUP BY NUM_RUA
 ORDER BY NUM_RUA)
 	LOOP
    BEGIN
     INSERT INTO POSICAO_ESTOQUE_RESUMIDO (COD_POSICAO_ESTOQUE, NUM_RUA, QTD_EXISTENTES, QTD_OCUPADOS, QTD_VAZIOS, OCUPACAO, DTH_ESTOQUE)
     VALUES (SQ_POSICAO_ESTOQUE_RESUM_01.NEXTVAL, i.NUM_RUA, i.QTD_EXISTENTES, i.QTD_OCUPADOS, i.QTD_VAZIOS, i.OCUPACAO,sysdate);
    END;

	END LOOP;
END PROC_GET_POS_ESTOQUE;

BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
            job_name => '"JOB_POSICAO_ESTOQUE"',
            job_type => 'STORED_PROCEDURE',
            job_action => 'PROC_GET_POS_ESTOQUE',
            number_of_arguments => 0,
            start_date => NULL,
            repeat_interval => 'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI,SAT,SUN;BYHOUR=4;BYMINUTE=0;BYSECOND=0',
            end_date => NULL,
            enabled => FALSE,
            auto_drop => FALSE,
            comments => '');

    DBMS_SCHEDULER.SET_ATTRIBUTE(
             name => '"JOB_POSICAO_ESTOQUE"',
             attribute => 'logging_level', value => DBMS_SCHEDULER.LOGGING_OFF);

    DBMS_SCHEDULER.enable(
             name => '"JOB_POSICAO_ESTOQUE"');
END;
