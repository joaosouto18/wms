----------------------------------------------------------ALTERAR O PALETE E A RESERVA DE ESTOQUE ---------------------------------

CREATE OR REPLACE FORCE VIEW V_QTD_RECEBIMENTO as
SELECT MIN(QTD.QTD) as QTD,
    QTD.COD_RECEBIMENTO,
    QTD.COD_PRODUTO,
    QTD.DSC_GRADE,
    QTD.COD_OS,
    NP.COD_NORMA_PALETIZACAO
  FROM (SELECT SUM(NVL(RV.QTD_CONFERIDA,0)) AS QTD,
          RV.COD_RECEBIMENTO,
          RV.COD_PRODUTO_VOLUME,
          PV.COD_PRODUTO,
          PV.DSC_GRADE,
          OS.COD_OS
        FROM RECEBIMENTO_VOLUME RV
          INNER JOIN (SELECT DISTINCT DTH_FINAL_ATIVIDADE,
                        COD_OS,
                        COD_PRODUTO_VOLUME,
                        COD_RECEBIMENTO,
                        RANK() OVER(PARTITION BY COD_RECEBIMENTO, COD_PRODUTO_VOLUME ORDER BY DTH_FINAL_ATIVIDADE DESC) RANK
                      FROM (SELECT CASE WHEN DTH_FINAL_ATIVIDADE IS NULL THEN TO_DATE('31/12/9999','dd/mm/yyyy')
                                   ELSE DTH_FINAL_ATIVIDADE END AS DTH_FINAL_ATIVIDADE,
                              OS.COD_OS,
                              OS.COD_RECEBIMENTO,
                              RV.COD_PRODUTO_VOLUME
                            FROM RECEBIMENTO_VOLUME RV
                              LEFT JOIN ORDEM_SERVICO OS ON OS.COD_OS = RV.COD_OS)) OS
            ON OS.COD_OS = RV.COD_OS
               AND OS.RANK <= 1
               AND OS.COD_RECEBIMENTO = RV.COD_RECEBIMENTO
               AND OS.COD_PRODUTO_VOLUME = RV.COD_PRODUTO_VOLUME
          LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO_VOLUME = RV.COD_PRODUTO_VOLUME
        GROUP BY RV.COD_RECEBIMENTO, RV.COD_PRODUTO_VOLUME, PV.COD_PRODUTO, PV.DSC_GRADE, OS.COD_OS) QTD
    LEFT JOIN (SELECT MIN(RV.COD_NORMA_PALETIZACAO) as COD_NORMA_PALETIZACAO,
                 RV.COD_RECEBIMENTO,
                 PV.COD_PRODUTO,
                 PV.DSC_GRADE,
                 OS.COD_OS,
                 MIN(NP.NUM_NORMA) as NORMA
               FROM RECEBIMENTO_VOLUME RV
                 INNER JOIN (SELECT DISTINCT DTH_FINAL_ATIVIDADE,
                               COD_OS,
                               COD_PRODUTO_VOLUME,
                               COD_RECEBIMENTO,
                               RANK() OVER(PARTITION BY COD_RECEBIMENTO, COD_PRODUTO_VOLUME ORDER BY DTH_FINAL_ATIVIDADE DESC) RANK
                             FROM (SELECT CASE WHEN DTH_FINAL_ATIVIDADE IS NULL THEN TO_DATE('31/12/9999','dd/mm/yyyy')
                                          ELSE DTH_FINAL_ATIVIDADE END AS DTH_FINAL_ATIVIDADE,
                                     OS.COD_OS,
                                     OS.COD_RECEBIMENTO,
                                     RV.COD_PRODUTO_VOLUME
                                   FROM RECEBIMENTO_VOLUME RV
                                     LEFT JOIN ORDEM_SERVICO OS ON OS.COD_OS = RV.COD_OS)) OS
                   ON OS.COD_OS = RV.COD_OS
                      AND OS.RANK <= 1
                      AND OS.COD_RECEBIMENTO = RV.COD_RECEBIMENTO
                      AND OS.COD_PRODUTO_VOLUME = RV.COD_PRODUTO_VOLUME
                 LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO_VOLUME = RV.COD_PRODUTO_VOLUME
                 LEFT JOIN NORMA_PALETIZACAO NP ON NP.COD_NORMA_PALETIZACAO = RV.COD_NORMA_PALETIZACAO
               GROUP BY RV.COD_RECEBIMENTO,  PV.COD_PRODUTO, PV.DSC_GRADE, OS.COD_OS) NP
      ON NP.COD_RECEBIMENTO = QTD.COD_RECEBIMENTO
         AND NP.COD_PRODUTO = QTD.COD_PRODUTO
         AND NP.DSC_GRADE = QTD.DSC_GRADE
         AND NP.COD_OS = QTD.COD_OS
  GROUP BY QTD.COD_PRODUTO, QTD.COD_RECEBIMENTO, QTD.DSC_GRADE, QTD.COD_OS,NP.COD_NORMA_PALETIZACAO
  UNION
  SELECT SUM(RE.QTD_CONFERIDA * PE.QTD_EMBALAGEM) AS QTD,
    RE.COD_RECEBIMENTO,
    PE.COD_PRODUTO,
    PE.DSC_GRADE,
    OS.COD_OS,
    RE.COD_NORMA_PALETIZACAO
  FROM RECEBIMENTO_EMBALAGEM RE
    INNER JOIN (SELECT DISTINCT DTH_FINAL_ATIVIDADE,
                  COD_OS,
                  COD_PRODUTO_EMBALAGEM,
                  COD_RECEBIMENTO,
                  RANK() OVER(PARTITION BY COD_RECEBIMENTO, COD_PRODUTO_EMBALAGEM ORDER BY DTH_FINAL_ATIVIDADE DESC) RANK
                FROM (SELECT CASE WHEN DTH_FINAL_ATIVIDADE IS NULL THEN TO_DATE('31/12/9999','dd/mm/yyyy')
                             ELSE DTH_FINAL_ATIVIDADE END AS DTH_FINAL_ATIVIDADE,
                        OS.COD_OS,
                        OS.COD_RECEBIMENTO,
                        RE.COD_PRODUTO_EMBALAGEM
                      FROM RECEBIMENTO_EMBALAGEM RE
                        LEFT JOIN ORDEM_SERVICO OS ON OS.COD_OS = RE.COD_OS)) OS
      ON OS.COD_OS = RE.COD_OS
         AND OS.RANK <= 1
         AND OS.COD_RECEBIMENTO = RE.COD_RECEBIMENTO
         AND OS.COD_PRODUTO_EMBALAGEM = RE.COD_PRODUTO_EMBALAGEM
    LEFT JOIN PRODUTO_EMBALAGEM PE ON PE.COD_PRODUTO_EMBALAGEM = RE.COD_PRODUTO_EMBALAGEM
  GROUP BY RE.COD_RECEBIMENTO,
    PE.COD_PRODUTO,
    PE.DSC_GRADE,
    OS.COD_OS,
    RE.COD_NORMA_PALETIZACAO;

CREATE TABLE PALETE_PRODUTO
(
  COD_PALETE_PRODUTO    NUMBER (8) NOT NULL,
  UMA                   NUMBER (8) NOT NULL,
  COD_NORMA_PALETIZACAO NUMBER (8) NOT NULL,
  COD_PRODUTO_EMBALAGEM NUMBER (8) ,
  COD_PRODUTO_VOLUME    NUMBER (8) ,
  QTD                   NUMBER (8) ,
  QTD_ENDERECADA        NUMBER (8),
  COD_PRODUTO           VARCHAR2 (20 BYTE)  NOT NULL ,
  DSC_GRADE             VARCHAR2 (10 BYTE)  NOT NULL
)
LOGGING ;

CREATE TABLE RESERVA_ESTOQUE_PRODUTO
(
  COD_RESERVA_ESTOQUE_PRODUTO NUMBER (8) NOT NULL,
  COD_RESERVA_ESTOQUE         NUMBER (8) NOT NULL,
  COD_PRODUTO                 VARCHAR2 (20 BYTE)   NOT NULL ,
  DSC_GRADE                   VARCHAR2 (10 BYTE)   NOT NULL,
  COD_PRODUTO_EMBALAGEM       NUMBER (8) ,
  COD_PRODUTO_VOLUME          NUMBER (8) ,
  QTD_RESERVADA               NUMBER (8)
)
LOGGING ;

CREATE SEQUENCE SQ_PALETE_PRODUTO_01
START WITH 1
MAXVALUE 99999999999999999
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE SEQUENCE SQ_RESERVA_ESTOQUE_PRODUTO_01
START WITH 1
MAXVALUE 99999999999999999
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

INSERT INTO PALETE_PRODUTO
SELECT SQ_PALETE_PRODUTO_01.NEXTVAL as COD_PALETE_PRODUTO,
       P.UMA,
       P.COD_NORMA_PALETIZACAO,
       PE.COD_PRODUTO_EMBALAGEM,
       PV.COD_PRODUTO_VOLUME,
       P.QTD,
       P.QTD_ENDERECADA,
       P.COD_PRODUTO,
       P.DSC_GRADE
  FROM PALETE P
  LEFT JOIN PRODUTO_EMBALAGEM PE ON PE.COD_PRODUTO = P.COD_PRODUTO AND PE.DSC_GRADE = P.DSC_GRADE
  LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO = P.COD_PRODUTO AND PV.DSC_GRADE = P.DSC_GRADE;

ALTER TABLE PALETE
 DROP (COD_PRODUTO, DSC_GRADE, QTD, QTD_ENDERECADA, COD_NORMA_PALETIZACAO);

ALTER TABLE RESERVA_ESTOQUE
 DROP (COD_PRODUTO, DSC_GRADE, QTD_RESERVADA);

------------------------------------------------ALTERAR O ESTOQUE ----------------------------------------------------------

--SCRIPT PARA ALTERAR A COLUNA ESTOUE
ALTER TABLE ESTOQUE ADD(
  COD_PRODUTO_EMBALAGEM NUMBER (8) ,
  COD_PRODUTO_VOLUME NUMBER (8)
);

ALTER TABLE HISTORICO_ESTOQUE ADD(
  COD_PRODUTO_EMBALAGEM NUMBER (8) ,
  COD_PRODUTO_VOLUME NUMBER (8),
  UMA NUMBER (8)
);

--QUERY PARA ACERTAR O CONTEUDO DA TABELA ESTOQUE
UPDATE ESTOQUE E
   SET E.COD_PRODUTO_EMBALAGEM = (SELECT MAX(PE.COD_PRODUTO_EMBALAGEM) as COD_PRODUTO_EMBALAGEM
                                    FROM PRODUTO_EMBALAGEM PE
                                   INNER JOIN (SELECT MIN(QTD_EMBALAGEM) as QTD, COD_PRODUTO, DSC_GRADE
                                                 FROM PRODUTO_EMBALAGEM
                                                GROUP BY COD_PRODUTO, DSC_GRADE) MINPE
                                      ON MINPE.COD_PRODUTO = PE.COD_PRODUTO
                                     AND MINPE.DSC_GRADE = PE.DSC_GRADE
                                     AND MINPE.QTD = PE.QTD_EMBALAGEM
                                   WHERE E.COD_PRODUTO = PE.COD_PRODUTO
                                    AND  E.DSC_GRADE = PE.DSC_GRADE);

UPDATE HISTORICO_ESTOQUE E
   SET E.COD_PRODUTO_EMBALAGEM = (SELECT MAX(PE.COD_PRODUTO_EMBALAGEM) as COD_PRODUTO_EMBALAGEM
                                    FROM PRODUTO_EMBALAGEM PE
                                   INNER JOIN (SELECT MIN(QTD_EMBALAGEM) as QTD, COD_PRODUTO, DSC_GRADE
                                                 FROM PRODUTO_EMBALAGEM
                                                GROUP BY COD_PRODUTO, DSC_GRADE) MINPE
                                      ON MINPE.COD_PRODUTO = PE.COD_PRODUTO
                                     AND MINPE.DSC_GRADE = PE.DSC_GRADE
                                     AND MINPE.QTD = PE.QTD_EMBALAGEM
                                   WHERE E.COD_PRODUTO = PE.COD_PRODUTO
                                    AND  E.DSC_GRADE = PE.DSC_GRADE);

INSERT INTO ESTOQUE (COD_ESTOQUE, COD_PRODUTO, DSC_GRADE, COD_DEPOSITO_ENDERECO, DTH_PRIMEIRA_MOVIMENTACAO, QTD, COD_UNITIZADOR, UMA, COD_PRODUTO_EMBALAGEM, COD_PRODUTO_VOLUME)
SELECT SQ_ESTOQUE_01.NEXTVAL as COD_ESTOQUE,
       E.COD_PRODUTO,
       E.DSC_GRADE,
       E.COD_DEPOSITO_ENDERECO,
       E.DTH_PRIMEIRA_MOVIMENTACAO,
       E.QTD,
       E.COD_UNITIZADOR,
       E.UMA,
       E.COD_PRODUTO_EMBALAGEM,
       PV.COD_PRODUTO_VOLUME
  FROM ESTOQUE E
 INNER JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO = E.COD_PRODUTO AND PV.DSC_GRADE = E.DSC_GRADE ;

INSERT INTO HISTORICO_ESTOQUE (COD_HISTORICO_ESTOQUE, COD_PRODUTO, DSC_GRADE, COD_DEPOSITO_ENDERECO, DTH_MOVIMENTACAO, QTD, COD_UNITIZADOR, COD_PRODUTO_EMBALAGEM, COD_PRODUTO_VOLUME, IND_TIPO, COD_OS, COD_PESSOA, DSC_DEPOSITO_ENDERECO)
SELECT SQ_HISTORICO_ESTOQUE_01.NEXTVAL as COD_HISTORICO_ESTOQUE,
       E.COD_PRODUTO,
       E.DSC_GRADE,
       E.COD_DEPOSITO_ENDERECO,
       E.DTH_MOVIMENTACAO,
       E.QTD,
       E.COD_UNITIZADOR,
       E.COD_PRODUTO_EMBALAGEM,
       PV.COD_PRODUTO_VOLUME,
       IND_TIPO,
       COD_OS,
       COD_PESSOA,
       DSC_DEPOSITO_ENDERECO
  FROM HISTORICO_ESTOQUE E
 INNER JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO = E.COD_PRODUTO AND PV.DSC_GRADE = E.DSC_GRADE ;

DELETE FROM ESTOQUE WHERE COD_PRODUTO_EMBALAGEM IS NULL AND COD_PRODUTO_VOLUME IS NULL;

DELETE FROM HISTORICO_ESTOQUE WHERE COD_PRODUTO_EMBALAGEM IS NULL AND COD_PRODUTO_VOLUME IS NULL;

ALTER TABLE PRODUTO_EMBALAGEM ADD(
  PONTO_REPOSICAO    NUMBER (8) DEFAULT 0 NOT NULL ,
  CAPACIDADE_PICKING NUMBER (8) DEFAULT 0 NOT NULL
);

ALTER TABLE PRODUTO_VOLUME ADD(
  PONTO_REPOSICAO    NUMBER (8) DEFAULT 0 NOT NULL ,
  CAPACIDADE_PICKING NUMBER (8) DEFAULT 0 NOT NULL
);

UPDATE PRODUTO SET PONTO_REPOSICAO = 0 WHERE PONTO_REPOSICAO IS NULL;
UPDATE PRODUTO SET CAPACIDADE_PICKING = 0 WHERE CAPACIDADE_PICKING IS NULL;
UPDATE PRODUTO_VOLUME PV
   SET PV.CAPACIDADE_PICKING = (SELECT CAPACIDADE_PICKING
                                  FROM PRODUTO P
                                 WHERE P.COD_PRODUTO = PV.COD_PRODUTO
                                   AND P.DSC_GRADE = PV.DSC_GRADE);
UPDATE PRODUTO_VOLUME PV
   SET PV.PONTO_REPOSICAO = (SELECT PONTO_REPOSICAO
                                  FROM PRODUTO P
                                 WHERE P.COD_PRODUTO = PV.COD_PRODUTO
                                   AND P.DSC_GRADE = PV.DSC_GRADE);
UPDATE PRODUTO_EMBALAGEM PE
   SET PE.CAPACIDADE_PICKING = (SELECT CAPACIDADE_PICKING
                                  FROM PRODUTO P
                                 WHERE P.COD_PRODUTO = PE.COD_PRODUTO
                                   AND P.DSC_GRADE = PE.DSC_GRADE);
UPDATE PRODUTO_EMBALAGEM PE
   SET PE.PONTO_REPOSICAO = (SELECT PONTO_REPOSICAO
                                  FROM PRODUTO P
                                 WHERE P.COD_PRODUTO = PE.COD_PRODUTO
                                   AND P.DSC_GRADE = PE.DSC_GRADE);
UPDATE PRODUTO_VOLUME PV
   SET CAPACIDADE_PICKING = (SELECT NUM_NORMA
                               FROM NORMA_PALETIZACAO NP
                              WHERE NP.COD_NORMA_PALETIZACAO = PV.COD_NORMA_PALETIZACAO)
 WHERE PV.CAPACIDADE_PICKING = 0;
UPDATE PRODUTO_EMBALAGEM PE
   SET CAPACIDADE_PICKING = (SELECT NVL(NORMA,0)
                               FROM (SELECT MIN(NP.NUM_NORMA) AS NORMA,
                                            PE.COD_PRODUTO_EMBALAGEM
                                       FROM PRODUTO_EMBALAGEM PE
                                       LEFT JOIN PRODUTO_DADO_LOGISTICO PDL ON PDL.COD_PRODUTO_EMBALAGEM = PE.COD_PRODUTO_EMBALAGEM
                                       LEFT JOIN NORMA_PALETIZACAO NP ON NP.COD_NORMA_PALETIZACAO = PDL.COD_NORMA_PALETIZACAO
                                      GROUP BY PE.COD_PRODUTO_EMBALAGEM) NP
                              WHERE NP.COD_PRODUTO_EMBALAGEM = PE.COD_PRODUTO_EMBALAGEM)
 WHERE PE.CAPACIDADE_PICKING = 0;

ALTER TABLE PRODUTO
 DROP (PONTO_REPOSICAO, CAPACIDADE_PICKING);


ALTER TABLE FILIAL ADD(
  IND_UTILIZA_RESSUPRIMENTO VARCHAR2(20 BYTE) default 'N'
);

CREATE TABLE ONDA_RESSUPRIMENTO_OS_PRODUTO
(
  COD_ONDA_RESSUPRIMENTO_OS_PROD NUMBER (8) NOT NULL,
  COD_ONDA_RESSUPRIMENTO_OS      NUMBER (8) NOT NULL,
  COD_PRODUTO                    VARCHAR2 (20 BYTE)  NOT NULL ,
  DSC_GRADE                      VARCHAR2 (10 BYTE)  NOT NULL ,
  COD_PRODUTO_EMBALAGEM          NUMBER (8) ,
  COD_PRODUTO_VOLUME             NUMBER (8) ,
  QTD                            NUMBER (8)
)
LOGGING ;

CREATE SEQUENCE SQ_ONDA_RESSUPRIMENTO_OS_PROD
START WITH 1
MAXVALUE 99999999999999999
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

ALTER TABLE ONDA_RESSUPRIMENTO_OS
 DROP (COD_PRODUTO, DSC_GRADE, QTD);

ALTER TABLE ONDA_RESSUPRIMENTO_OS ADD(
  SEQUENCIA NUMBER (8)
);

CREATE SEQUENCE SQ_SEQUENCIA_ONDA_OS
START WITH 1
MAXVALUE 99999999999999999
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

INSERT INTO RECURSO_ACAO (COD_RECURSO_ACAO, COD_RECURSO, COD_ACAO, DSC_RECURSO_ACAO)VALUES (SQ_RECURSO_ACAO_01.NEXTVAL, (SELECT COD_RECURSO FROM RECURSO WHERE NOM_RECURSO = 'expedicao:onda-ressuprimento'), (SELECT COD_ACAO FROM ACAO WHERE NOM_ACAO = 'sem-dados'), 'Relatório de Produtos sem picking na Onda de Ressuprimento');



  CREATE OR REPLACE FORCE VIEW V_SALDO_ESTOQUE AS
  SELECT E.COD_PRODUTO, E.DSC_GRADE,  E.COD_DEPOSITO_ENDERECO, E.DSC_DEPOSITO_ENDERECO, E.COD_LINHA_SEPARACAO, E.DSC_LINHA_SEPARACAO, SUM(E.QTD) as QTDE, E.COD_UNITIZADOR, E.DSC_UNITIZADOR, CONCAT(VOLUME,';CADASTRO') as VOLUME
  FROM (SELECT P.COD_PRODUTO, P.DSC_GRADE, DE.COD_DEPOSITO_ENDERECO, DE.DSC_DEPOSITO_ENDERECO,LS.COD_LINHA_SEPARACAO, LS.DSC_LINHA_SEPARACAO, NVL(E.QTD,0) AS QTD, E.COD_UNITIZADOR, UN.DSC_UNITIZADOR,
        CASE WHEN E.COD_PRODUTO_EMBALAGEM IS NOT NULL THEN 'PRODUTO UNITARIO'
             WHEN E.COD_PRODUTO_VOLUME IS NOT NULL THEN PV.DSC_VOLUME
        END as VOLUME
        FROM (SELECT DISTINCT P.COD_PRODUTO, P.DSC_GRADE,P.COD_LINHA_SEPARACAO,  NVL(PV.COD_DEPOSITO_ENDERECO, PE.COD_DEPOSITO_ENDERECO) AS COD_DEPOSITO_ENDERECO
              FROM PRODUTO P
                LEFT JOIN PRODUTO_VOLUME PV ON P.COD_PRODUTO = PV.COD_PRODUTO AND P.DSC_GRADE = PV.DSC_GRADE AND PV.COD_DEPOSITO_ENDERECO IS NOT NULL
                LEFT JOIN PRODUTO_EMBALAGEM PE ON P.COD_PRODUTO = PE.COD_PRODUTO AND P.DSC_GRADE = PE.DSC_GRADE AND PE.COD_DEPOSITO_ENDERECO IS NOT NULL) P
          LEFT JOIN ESTOQUE E ON P.COD_PRODUTO = E.COD_PRODUTO AND P.DSC_GRADE = E.DSC_GRADE AND P.COD_DEPOSITO_ENDERECO = E.COD_DEPOSITO_ENDERECO
          LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO_VOLUME = E.COD_PRODUTO_VOLUME
          LEFT JOIN LINHA_SEPARACAO LS ON LS.COD_LINHA_SEPARACAO = P.COD_LINHA_SEPARACAO
         INNER JOIN DEPOSITO_ENDERECO DE ON DE.COD_DEPOSITO_ENDERECO = P.COD_DEPOSITO_ENDERECO
          LEFT JOIN UNITIZADOR UN ON UN.COD_UNITIZADOR = E.COD_UNITIZADOR) E
  GROUP BY COD_PRODUTO, DSC_GRADE, COD_DEPOSITO_ENDERECO, DSC_DEPOSITO_ENDERECO, COD_LINHA_SEPARACAO, DSC_LINHA_SEPARACAO, COD_UNITIZADOR, DSC_UNITIZADOR, VOLUME
UNION
SELECT P.COD_PRODUTO, P.DSC_GRADE, DE.COD_DEPOSITO_ENDERECO, DE.DSC_DEPOSITO_ENDERECO,LS.COD_LINHA_SEPARACAO, LS.DSC_LINHA_SEPARACAO, SUM(NVL(E.QTD,0)) AS QTDE, E.COD_UNITIZADOR, UN.DSC_UNITIZADOR as UNITIZADOR,
        CASE WHEN E.COD_PRODUTO_EMBALAGEM IS NOT NULL THEN 'PRODUTO UNITARIO'
             WHEN E.COD_PRODUTO_VOLUME IS NOT NULL THEN PV.DSC_VOLUME
        END as VOLUME
  FROM ESTOQUE E
  LEFT JOIN DEPOSITO_ENDERECO DE ON DE.COD_DEPOSITO_ENDERECO = E.COD_DEPOSITO_ENDERECO
  LEFT JOIN PRODUTO P ON P.COD_PRODUTO = E.COD_PRODUTO AND P.DSC_GRADE = E.DSC_GRADE
  LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO_VOLUME = E.COD_PRODUTO_VOLUME
  LEFT JOIN LINHA_SEPARACAO LS ON LS.COD_LINHA_SEPARACAO = P.COD_LINHA_SEPARACAO
  LEFT JOIN UNITIZADOR UN ON E.COD_UNITIZADOR = UN.COD_UNITIZADOR
  LEFT JOIN PARAMETRO PARAM ON PARAM.DSC_PARAMETRO = 'ID_CARACTERISTICA_PICKING'
 WHERE DE.COD_CARACTERISTICA_ENDERECO != PARAM.DSC_VALOR_PARAMETRO
 GROUP BY P.COD_PRODUTO, P.DSC_GRADE, LS.COD_LINHA_SEPARACAO, LS.DSC_LINHA_SEPARACAO, DE.COD_DEPOSITO_ENDERECO, DE.DSC_DEPOSITO_ENDERECO, E.COD_UNITIZADOR, UN.DSC_UNITIZADOR,PV.DSC_VOLUME, E.COD_PRODUTO_VOLUME, E.COD_PRODUTO_EMBALAGEM
 UNION
SELECT E.COD_PRODUTO,
       E.DSC_GRADE,
       DE.COD_DEPOSITO_ENDERECO,
       DE.DSC_DEPOSITO_ENDERECO,
       LS.COD_LINHA_SEPARACAO,
       LS.DSC_LINHA_SEPARACAO,
       E.QTD,
       E.COD_UNITIZADOR,
       UN.DSC_UNITIZADOR,
       NVL(PE.DSC_EMBALAGEM, PV.DSC_VOLUME) as VOLUME
  FROM ESTOQUE E
  LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO_VOLUME = E.COD_PRODUTO_VOLUME
  LEFT JOIN PRODUTO_EMBALAGEM PE ON PE.COD_PRODUTO_EMBALAGEM = E.COD_PRODUTO_EMBALAGEM
  LEFT JOIN DEPOSITO_ENDERECO DE ON DE.COD_DEPOSITO_ENDERECO = E.COD_DEPOSITO_ENDERECO
  LEFT JOIN PRODUTO P ON P.COD_PRODUTO = E.COD_PRODUTO AND P.DSC_GRADE = E.DSC_GRADE
  LEFT JOIN LINHA_SEPARACAO LS ON LS.COD_LINHA_SEPARACAO = P.COD_LINHA_SEPARACAO
  LEFT JOIN UNITIZADOR UN ON UN.COD_UNITIZADOR = E.COD_UNITIZADOR
 WHERE DE.COD_CARACTERISTICA_ENDERECO = 37
   AND (E.COD_DEPOSITO_ENDERECO <> PE.COD_DEPOSITO_ENDERECO
     OR E.COD_DEPOSITO_ENDERECO <> PV.COD_DEPOSITO_ENDERECO);



  CREATE OR REPLACE FORCE VIEW V_SALDO_ESTOQUE_COMPLETO AS
  SELECT E.COD_PRODUTO, E.DSC_GRADE,  E.COD_DEPOSITO_ENDERECO, E.DSC_DEPOSITO_ENDERECO, E.COD_LINHA_SEPARACAO, E.DSC_LINHA_SEPARACAO, SUM(E.QTD) as QTDE, E.COD_UNITIZADOR, E.DSC_UNITIZADOR, CONCAT(E.VOLUME,';CADASTRO') as VOLUME
  FROM (SELECT P.COD_PRODUTO, P.DSC_GRADE, DE.COD_DEPOSITO_ENDERECO, DE.DSC_DEPOSITO_ENDERECO,LS.COD_LINHA_SEPARACAO, LS.DSC_LINHA_SEPARACAO, NVL(E.QTD,0) AS QTD, E.COD_UNITIZADOR, UN.DSC_UNITIZADOR,
               CASE WHEN E.COD_PRODUTO_EMBALAGEM IS NOT NULL THEN 'PRODUTO UNITARIO'
                    WHEN E.COD_PRODUTO_VOLUME IS NOT NULL THEN PV.DSC_VOLUME
               END as VOLUME
        FROM (SELECT DISTINCT P.COD_PRODUTO, P.DSC_GRADE,P.COD_LINHA_SEPARACAO,  NVL(PV.COD_DEPOSITO_ENDERECO, PE.COD_DEPOSITO_ENDERECO) AS COD_DEPOSITO_ENDERECO
              FROM PRODUTO P
                LEFT JOIN PRODUTO_VOLUME PV ON P.COD_PRODUTO = PV.COD_PRODUTO AND P.DSC_GRADE = PV.DSC_GRADE AND PV.COD_DEPOSITO_ENDERECO IS NOT NULL
                LEFT JOIN PRODUTO_EMBALAGEM PE ON P.COD_PRODUTO = PE.COD_PRODUTO AND P.DSC_GRADE = PE.DSC_GRADE AND PE.COD_DEPOSITO_ENDERECO IS NOT NULL) P
          LEFT JOIN ESTOQUE E ON P.COD_PRODUTO = E.COD_PRODUTO AND P.DSC_GRADE = E.DSC_GRADE AND P.COD_DEPOSITO_ENDERECO = E.COD_DEPOSITO_ENDERECO
          LEFT JOIN LINHA_SEPARACAO LS ON LS.COD_LINHA_SEPARACAO = P.COD_LINHA_SEPARACAO
          LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO_VOLUME = E.COD_PRODUTO_VOLUME
         INNER JOIN DEPOSITO_ENDERECO DE ON DE.COD_DEPOSITO_ENDERECO = P.COD_DEPOSITO_ENDERECO
          LEFT JOIN UNITIZADOR UN ON UN.COD_UNITIZADOR = E.COD_UNITIZADOR) E
  GROUP BY COD_PRODUTO, DSC_GRADE, COD_DEPOSITO_ENDERECO, DSC_DEPOSITO_ENDERECO, COD_LINHA_SEPARACAO, DSC_LINHA_SEPARACAO, COD_UNITIZADOR, DSC_UNITIZADOR, VOLUME
UNION
SELECT P.COD_PRODUTO, P.DSC_GRADE, DE.COD_DEPOSITO_ENDERECO, DE.DSC_DEPOSITO_ENDERECO,LS.COD_LINHA_SEPARACAO, LS.DSC_LINHA_SEPARACAO, SUM(NVL(E.QTD,0)) AS QTDE, E.COD_UNITIZADOR, UN.DSC_UNITIZADOR as UNITIZADOR,
        CASE WHEN E.COD_PRODUTO_EMBALAGEM IS NOT NULL THEN 'PRODUTO UNITARIO'
             WHEN E.COD_PRODUTO_VOLUME IS NOT NULL THEN PV.DSC_VOLUME
        END as VOLUME
  FROM DEPOSITO_ENDERECO DE
  LEFT JOIN ESTOQUE E ON DE.COD_DEPOSITO_ENDERECO = E.COD_DEPOSITO_ENDERECO
  LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO_VOLUME = E.COD_PRODUTO_VOLUME
  LEFT JOIN PRODUTO P ON P.COD_PRODUTO = E.COD_PRODUTO AND P.DSC_GRADE = E.DSC_GRADE
  LEFT JOIN LINHA_SEPARACAO LS ON LS.COD_LINHA_SEPARACAO = P.COD_LINHA_SEPARACAO
  LEFT JOIN UNITIZADOR UN ON E.COD_UNITIZADOR = UN.COD_UNITIZADOR
  LEFT JOIN PARAMETRO PARAM ON PARAM.DSC_PARAMETRO = 'ID_CARACTERISTICA_PICKING'
  WHERE DE.COD_CARACTERISTICA_ENDERECO != PARAM.DSC_VALOR_PARAMETRO
 GROUP BY P.COD_PRODUTO, P.DSC_GRADE, LS.COD_LINHA_SEPARACAO, LS.DSC_LINHA_SEPARACAO, DE.COD_DEPOSITO_ENDERECO, DE.DSC_DEPOSITO_ENDERECO, E.COD_UNITIZADOR, UN.DSC_UNITIZADOR, E.COD_PRODUTO_VOLUME, E.COD_PRODUTO_EMBALAGEM, PV.DSC_VOLUME
UNION
SELECT E.COD_PRODUTO,
       E.DSC_GRADE,
       DE.COD_DEPOSITO_ENDERECO,
       DE.DSC_DEPOSITO_ENDERECO,
       LS.COD_LINHA_SEPARACAO,
       LS.DSC_LINHA_SEPARACAO,
       E.QTD,
       E.COD_UNITIZADOR,
       UN.DSC_UNITIZADOR,
       NVL(PE.DSC_EMBALAGEM, PV.DSC_VOLUME) as VOLUME
  FROM ESTOQUE E
  LEFT JOIN PRODUTO_VOLUME PV ON PV.COD_PRODUTO_VOLUME = E.COD_PRODUTO_VOLUME
  LEFT JOIN PRODUTO_EMBALAGEM PE ON PE.COD_PRODUTO_EMBALAGEM = E.COD_PRODUTO_EMBALAGEM
  LEFT JOIN DEPOSITO_ENDERECO DE ON DE.COD_DEPOSITO_ENDERECO = E.COD_DEPOSITO_ENDERECO
  LEFT JOIN PRODUTO P ON P.COD_PRODUTO = E.COD_PRODUTO AND P.DSC_GRADE = E.DSC_GRADE
  LEFT JOIN LINHA_SEPARACAO LS ON LS.COD_LINHA_SEPARACAO = P.COD_LINHA_SEPARACAO
  LEFT JOIN UNITIZADOR UN ON UN.COD_UNITIZADOR = E.COD_UNITIZADOR
 WHERE DE.COD_CARACTERISTICA_ENDERECO = 37
   AND (E.COD_DEPOSITO_ENDERECO <> PE.COD_DEPOSITO_ENDERECO
     OR E.COD_DEPOSITO_ENDERECO <> PV.COD_DEPOSITO_ENDERECO);

UPDATE HISTORICO_ESTOQUE SET OBSERVACAO = 'Mov. ref. ressuprimento preventivo coletor' WHERE OBSERVACAO = 'Mov. efetuada no coletor';

INSERT INTO ACAO (COD_ACAO, DSC_ACAO, NOM_ACAO) VALUES (SQ_ACAO_01.NEXTVAL, 'volumes', 'volumes');
INSERT INTO RECURSO_ACAO (COD_RECURSO_ACAO, COD_RECURSO, COD_ACAO, DSC_RECURSO_ACAO) VALUES (SQ_RECURSO_ACAO_01.NEXTVAL, (SELECT COD_RECURSO FROM RECURSO WHERE NOM_RECURSO = 'enderecamento:movimentacao'), (SELECT COD_ACAO FROM ACAO WHERE NOM_ACAO = 'volumes'), 'filtrar volumes dos produtos');

INSERT INTO ACAO (COD_ACAO, DSC_ACAO, NOM_ACAO) VALUES (SQ_ACAO_01.NEXTVAL,'Relatorio de Produtos se estoque', 'sem-estoque-report');
INSERT INTO RECURSO_ACAO (COD_RECURSO_ACAO, COD_RECURSO, COD_ACAO, DSC_RECURSO_ACAO) VALUES (SQ_RECURSO_ACAO_01.NEXTVAL, (SELECT COD_RECURSO FROM RECURSO WHERE NOM_RECURSO = 'expedicao:index'),(SELECT COD_ACAO FROM ACAO WHERE NOM_ACAO = 'sem-estoque-report') , 'Início');

INSERT INTO SIGLA (COD_SIGLA, COD_TIPO_SIGLA, DSC_SIGLA, COD_REFERENCIA_SIGLA) VALUES (546, (SELECT COD_TIPO_SIGLA FROM TIPO_SIGLA WHERE DSC_TIPO_SIGLA = 'STATUS RESSUPRIMENTO'), 'DIVERGENTE', 'D');
INSERT INTO SIGLA (COD_SIGLA, COD_TIPO_SIGLA, DSC_SIGLA, COD_REFERENCIA_SIGLA) VALUES (547, (SELECT COD_TIPO_SIGLA FROM TIPO_SIGLA WHERE DSC_TIPO_SIGLA = 'STATUS RESSUPRIMENTO'), 'CANCELADO', 'C');

INSERT INTO ACAO (COD_ACAO, DSC_ACAO, NOM_ACAO) VALUES (SQ_ACAO_01.NEXTVAL,'Gerenciar Ordem de Servico', 'gerenciar-os');
INSERT INTO ACAO (COD_ACAO, DSC_ACAO, NOM_ACAO) VALUES (SQ_ACAO_01.NEXTVAL,'Liberar', 'liberar');
INSERT INTO RECURSO_ACAO (COD_RECURSO_ACAO, COD_RECURSO, COD_ACAO, DSC_RECURSO_ACAO) VALUES (SQ_RECURSO_ACAO_01.NEXTVAL, (SELECT COD_RECURSO FROM RECURSO WHERE NOM_RECURSO = 'expedicao:onda-ressuprimento'),(SELECT COD_ACAO FROM ACAO WHERE NOM_ACAO = 'liberar') , 'Liberar Os de Ressuprimento');
INSERT INTO RECURSO_ACAO (COD_RECURSO_ACAO, COD_RECURSO, COD_ACAO, DSC_RECURSO_ACAO) VALUES (SQ_RECURSO_ACAO_01.NEXTVAL, (SELECT COD_RECURSO FROM RECURSO WHERE NOM_RECURSO = 'expedicao:onda-ressuprimento'),(SELECT COD_ACAO FROM ACAO WHERE NOM_ACAO = 'cancelar') , 'Cancelar Os de Ressuprimento');
INSERT INTO RECURSO_ACAO (COD_RECURSO_ACAO, COD_RECURSO, COD_ACAO, DSC_RECURSO_ACAO) VALUES (SQ_RECURSO_ACAO_01.NEXTVAL, (SELECT COD_RECURSO FROM RECURSO WHERE NOM_RECURSO = 'expedicao:onda-ressuprimento'),(SELECT COD_ACAO FROM ACAO WHERE NOM_ACAO = 'gerenciar-os') , 'Gerenciar Ordens de Serviço da Expedição');
INSERT INTO MENU_ITEM (COD_MENU_ITEM, COD_RECURSO_ACAO, COD_PAI, DSC_MENU_ITEM, NUM_PESO, DSC_URL, SHOW) VALUES (SQ_MENU_ITEM_01.NEXTVAL, (SELECT COD_RECURSO_ACAO FROM RECURSO_ACAO WHERE COD_RECURSO = (SELECT COD_RECURSO FROM RECURSO WHERE NOM_RECURSO = 'expedicao:onda-ressuprimento') AND COD_ACAO = (SELECT COD_ACAO FROM ACAO WHERE NOM_ACAO = 'gerenciar-os')), (SELECT COD_MENU_ITEM FROM MENU_ITEM WHERE DSC_MENU_ITEM = 'Expedição' AND COD_PAI = 0), 'Gerenciar OS de Ressuprimento', 1, '#', 'S');

CREATE TABLE "RESSUPRIMENTO_ANDAMENTO"
(
  "NUM_SEQUENCIA"             NUMBER(8, 0) NOT NULL ENABLE,
  "COD_ONDA_RESSUPRIMENTO_OS" NUMBER(8, 0),
  "COD_USUARIO"               NUMBER(8, 0),
  "DTH_ANDAMENTO"             DATE,
  "DSC_OBSERVACAO"            VARCHAR2(20 BYTE),
  "COD_TIPO"                  NUMBER,
  CONSTRAINT "RESSUPRIMENTO_ANDAMENTO_PK" PRIMARY KEY ("NUM_SEQUENCIA")
);

CREATE SEQUENCE SQ_RESSU_ANDAMENTO
START WITH 1
MAXVALUE 99999999999999999
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

INSERT INTO TIPO_SIGLA (COD_TIPO_SIGLA, DSC_TIPO_SIGLA, IND_SIGLA_SISTEMA) VALUES (76, 'STATUS ANDAMENTO RESSUPRIMENTO', 'S');
INSERT INTO SIGLA (COD_SIGLA, COD_TIPO_SIGLA, DSC_SIGLA, COD_REFERENCIA_SIGLA) VALUES (548, (SELECT COD_TIPO_SIGLA FROM TIPO_SIGLA WHERE DSC_TIPO_SIGLA = 'STATUS ANDAMENTO RESSUPRIMENTO'), 'DIVERGENCIA', 'D');
INSERT INTO SIGLA (COD_SIGLA, COD_TIPO_SIGLA, DSC_SIGLA, COD_REFERENCIA_SIGLA) VALUES (549, (SELECT COD_TIPO_SIGLA FROM TIPO_SIGLA WHERE DSC_TIPO_SIGLA = 'STATUS ANDAMENTO RESSUPRIMENTO'), 'CANCELADO', 'C');
INSERT INTO SIGLA (COD_SIGLA, COD_TIPO_SIGLA, DSC_SIGLA, COD_REFERENCIA_SIGLA) VALUES (550, (SELECT COD_TIPO_SIGLA FROM TIPO_SIGLA WHERE DSC_TIPO_SIGLA = 'STATUS ANDAMENTO RESSUPRIMENTO'), 'LIBERADO', 'L');
