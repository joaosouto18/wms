INSERT INTO VERSAO (DTH, NUMERO_VERSAO, SCRIPT) VALUES (SYSDATE, '6.3.0','4-validacao-correcao-dados-logisticos.sql');

/*
 * VALIDAÇÕES REFERENTE A PESO
 */

/*** 1 VALIDAÇÂO - VALIDANDO SE TODAS AS EMBALAGENS ESTÃO PREENCHIDAS ***/
SELECT * FROM (
SELECT DISTINCT COD_PRODUTO, DSC_GRADE, 'POSSUI'
  FROM PRODUTO_EMBALAGEM
  WHERE NUM_PESO > 0) S
LEFT JOIN ( SELECT DISTINCT COD_PRODUTO, DSC_GRADE, 'NAO POSSUI'
  FROM PRODUTO_EMBALAGEM
  WHERE NUM_PESO = 0) N ON S.COD_PRODUTO = N.COD_PRODUTO AND S.DSC_GRADE = N.DSC_GRADE
WHERE N.COD_PRODUTO IS NOT NULL;

/*** 2 VALIDAÇÃO - VALIDANDO SE A INFORMAÇÃO ANTIGA É DIFERENTE DA INFORMAÇÃO NOVA ***/
SELECT *
  FROM PRODUTO_PESO_ANTIGO  PA
  LEFT JOIN PRODUTO_PESO  PN ON PA.COD_PRODUTO = PN.COD_PRODUTO AND PA.DSC_GRADE = PN.DSC_GRADE
  INNER JOIN (SELECT DISTINCT COD_PRODUTO, DSC_GRADE FROM PRODUTO_EMBALAGEM WHERE DTH_INATIVACAO IS NULL) C ON C.COD_PRODUTO = PA.COD_PRODUTO AND C.DSC_GRADE = PA.DSC_GRADE
  WHERE PA.NUM_PESO <> NVL(PN.NUM_PESO,0);

/*** 3 VALIDAÇÂO - VALIDANDO A COERENCIA DAS INFORMAÇÕES ***/
SELECT COD_PRODUTO, DSC_GRADE, COUNT( DISTINCT NUM_PESO / QTD_EMBALAGEM)
  FROM PRODUTO_EMBALAGEM WHERE NUM_PESO > 0
  GROUP BY  COD_PRODUTO, DSC_GRADE
  HAVING COUNT( DISTINCT NUM_PESO / QTD_EMBALAGEM) > 1;

/*
 * VALIDAÇÕES REFERENTE A CUBAGEM
 */

/*** 1 VALIDAÇÂO - VALIDANDO SE TODAS AS EMBALAGENS ESTÃO PREENCHIDAS ***/
SELECT * FROM (
SELECT DISTINCT COD_PRODUTO, DSC_GRADE, 'POSSUI'
  FROM PRODUTO_EMBALAGEM
  WHERE NUM_CUBAGEM > 0) S
LEFT JOIN ( SELECT DISTINCT COD_PRODUTO, DSC_GRADE, 'NAO POSSUI'
  FROM PRODUTO_EMBALAGEM
  WHERE NUM_CUBAGEM = 0) N ON S.COD_PRODUTO = N.COD_PRODUTO AND S.DSC_GRADE = N.DSC_GRADE
WHERE N.COD_PRODUTO IS NOT NULL;

/*** 2 VALIDAÇÃO - VALIDANDO SE A INFORMAÇÃO ANTIGA É DIFERENTE DA INFORMAÇÃO NOVA ***/
SELECT *
  FROM PRODUTO_PESO_ANTIGO  PA
  LEFT JOIN PRODUTO_PESO  PN ON PA.COD_PRODUTO = PN.COD_PRODUTO AND PA.DSC_GRADE = PN.DSC_GRADE
  INNER JOIN (SELECT DISTINCT COD_PRODUTO, DSC_GRADE FROM PRODUTO_EMBALAGEM WHERE DTH_INATIVACAO IS NULL) C ON C.COD_PRODUTO = PA.COD_PRODUTO AND C.DSC_GRADE = PA.DSC_GRADE
  WHERE ROUND(PA.NUM_CUBAGEM,4) <> ROUND(NVL(PN.NUM_CUBAGEM,0),4);

/*** 3 VALIDAÇÂO - VALIDANDO A COERENCIA DAS INFORMAÇÕES ***/
SELECT COD_PRODUTO, DSC_GRADE, COUNT( DISTINCT NUM_ALTURA / QTD_EMBALAGEM)
  FROM PRODUTO_EMBALAGEM WHERE NUM_ALTURA > 0
  GROUP BY  COD_PRODUTO, DSC_GRADE
  HAVING COUNT( DISTINCT NUM_ALTURA / QTD_EMBALAGEM) > 1;


/*
 * VALIDAÇÕES REFERENTE A ENDEREÇO DE PICKING
 */

/*** 1 VALIDAÇÂO - VALIDANDO SE TODAS AS EMBALAGENS ESTÃO PREENCHIDAS ***/
SELECT * FROM (
SELECT DISTINCT COD_PRODUTO, DSC_GRADE, 'POSSUI'
  FROM PRODUTO_EMBALAGEM
  WHERE COD_DEPOSITO_ENDERECO IS NOT NULL) S
LEFT JOIN ( SELECT DISTINCT COD_PRODUTO, DSC_GRADE, 'NAO POSSUI'
  FROM PRODUTO_EMBALAGEM
  WHERE COD_DEPOSITO_ENDERECO IS NULL) N ON S.COD_PRODUTO = N.COD_PRODUTO AND S.DSC_GRADE = N.DSC_GRADE
WHERE N.COD_PRODUTO IS NOT NULL;

/*** 2 VALIDAÇÂO - O PRODUTO POSSUI APENAS UM ENDEREÇO DE PICKING ***/
SELECT COD_PRODUTO, DSC_GRADE, COUNT(DISTINCT COD_DEPOSITO_ENDERECO)
  FROM PRODUTO_EMBALAGEM
  WHERE COD_DEPOSITO_ENDERECO IS NOT NULL
  AND DTH_INATIVACAO IS NULL
  GROUP BY COD_PRODUTO, DSC_GRADE
  HAVING COUNT(DISTINCT COD_DEPOSITO_ENDERECO) > 1


/*
 * DELETA AS TABELAS SUMARIOS CRIADAS TEMPORARIAMENTE PARA VALIDAÇÃO
 */

DROP TABLE PRODUTO_PESO_ANTIGO;

DROP PROCEDURE PROC_ATUALIZA_PESO_PRODUTO_OLD;
